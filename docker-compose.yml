version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: movie_postgres
    environment:
      POSTGRES_DB: moviedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      movie-network:
        aliases: [postgres]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: movie_redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      movie-network:
        aliases: [redis]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: movie_rabbitmq
    environment:
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"    # AMQP protocol
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    networks:
      movie-network:
        aliases: [rabbitmq]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "status"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: movie_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=yourpassword
      - DB_NAME=moviedb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - PORT=4000
      - NODE_ENV=production
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      movie-network:
        aliases: [backend]
    restart: unless-stopped
    mem_limit: 512m
    healthcheck:
      test: ["CMD", "node", "-e", "require('pg').Pool({connectionString: process.env.DATABASE_URL}).query('SELECT 1')"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: movie_worker
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=yourpassword
      - DB_NAME=moviedb
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      movie-network:
        aliases: [worker]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('amqplib').connect(process.env.RABBITMQ_URL).then(conn => conn.close())"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  movie-network:
    driver: bridge
    name: movieticketbooking_movie-network
    attachable: true

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local
  rabbitmqdata:
    driver: local